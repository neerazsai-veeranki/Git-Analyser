extends layout

block content
  include header
  br
  br
  div#container
    .container.py-5.h-100
      .row.d-flex.justify-content-center.align-items.align-items-center.h-100
        .col-8
          .card(style="border-radius: 15px;")
            .card-body.p-4
              .d-flex.text-black
                .flex-shrink-0
                  img.rounded-circle(
                    style="width: 180px; border-radius: 10px;"
                    alt="Generic placeholder image"
                    src=result.avatar_url
                  )
                .flex-grow-12.ms-12
                .col-12
                  h5.mb-1 #{result.login}
                  div
                    i.material-icons.inline-icon format_list_bulleted
                    span #{result.bio }
                  div
                    i.material-icons.inline-icon verified_user
                    span #{result.login}
                  div
                    i.material-icons.inline-icon place
                    span #{result.location }
                  br
                  div
                    a(href='/followers?id='+result.login)
                      i.material-icons.inline-icon people
                      span #{result.followers} Followers
                    a(href='/following?id='+result.login)
                      i.material-icons.inline-icon person_add
                      span #{result.following} Following
                    a(href='/viewRepos?id='+result.login)
                      i.material-icons.inline-icon source
                      span #{result.public_repos} Repositories
                      br
                      br
                    div.d-flex.justify-content-center
                      a#generateReportButton(href="javascript:void(0);", class="btn btn-primary", onclick=`generateReport(${JSON.stringify(result)})`)
                        | Generate Report
                      a#viewCommitsButton(href="/viewCommits?id="+result.login, class="btn btn-secondary", target="_blank")
                        | View User Activity
                      script(src="https://cdn.plot.ly/plotly-latest.min.js")
                      script.
                        async function generateCommitsGraph(result) {
                          const githubUsername = result.login;
                          const githubToken = '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'; // Replace with your GitHub personal access token
                          const headers = new Headers();
                          headers.append('Authorization', `token ${githubToken}`);
                          try {
                            // Fetch user's repositories
                            const repositoriesResponse = await fetch(`https://api.github.com/users/${githubUsername}/repos`, { headers });
                            if (repositoriesResponse.status === 200) {
                              const repositories = await repositoriesResponse.json();
                              const commitsData = await fetchCommitsData(githubUsername, repositories, headers);
                              generateGraph(commitsData);
                            } else {
                              console.error('Failed to fetch repositories: ', repositoriesResponse.status);
                            }
                          } catch (error) {
                            console.error(error);
                          }
                        }

                        async function fetchCommitsData(username, repositories, headers) {
                          const commitsData = { months: [], counts: [] };
                          for (const repo of repositories) {
                            const commitsResponse = await fetch(`https://api.github.com/repos/${username}/${repo.name}/commits`, { headers });
                            const commits = await commitsResponse.json();
                            commits.forEach(commit => {
                              const commitDate = new Date(commit.commit.author.date);
                              const month = `${commitDate.getFullYear()}-${commitDate.getMonth() + 1}`;
                              const index = commitsData.months.indexOf(month);
                              if (index !== -1) {
                                commitsData.counts[index]++;
                              } else {
                                commitsData.months.push(month);
                                commitsData.counts.push(1);
                              }
                            });
                          }
                          return commitsData;
                        }

                        function generateGraph(commitsData) {
                          const data = [{
                            x: commitsData.months,
                            y: commitsData.counts,
                            type: 'bar',
                            marker: {
                              color: 'rgb(0, 102, 204)',
                            },
                          }];
                          const layout = {
                            title: 'Commits Per Month',
                            xaxis: {
                              title: 'Month',
                            },
                            yaxis: {
                              title: 'Number of Commits',
                            },
                          };
                          Plotly.newPlot('commitsGraph', data, layout);
                        }

                        async function generateReport(result) {
                          const githubUsername = result.login;
                          const githubToken = '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'; // Replace with your GitHub personal access token

                          const headers = new Headers();
                          headers.append('Authorization', `token ${githubToken}`);

                          try {
                            // Fetch user's repositories
                            let page = 1;
                            let allRepositories = [];

                            while (true) {
                              const repositoriesResponse = await fetch(`https://api.github.com/users/${githubUsername}/repos?page=${page}`, { headers });
                              if (repositoriesResponse.status === 200) {
                                const repositories = await repositoriesResponse.json();
                                if (repositories.length === 0) {
                                  break;
                                }
                                allRepositories.push(...repositories);
                                page++;
                              } else {
                                console.error('Failed to fetch repositories: ', repositoriesResponse.status);
                                break;
                              }
                            }

                            const numRepos = allRepositories.length;

                            // Calculate the number of forks
                            let numForks = 0;
                            for (const repo of allRepositories) {
                              numForks += repo.forks_count;
                            }

                            // Calculate the number of commits, issues, and pull requests
                            let numCommits = 0;
                            let numIssues = 0;
                            let numPullRequests = 0;

                            for (const repo of allRepositories) {
                              const commitsResponse = await fetch(`https://api.github.com/repos/${githubUsername}/${repo.name}/commits`, { headers });
                              const issuesResponse = await fetch(`https://api.github.com/repos/${githubUsername}/${repo.name}/issues`, { headers });
                              const pullRequestsResponse = await fetch(`https://api.github.com/repos/${githubUsername}/${repo.name}/pulls`, { headers });

                              const commits = await commitsResponse.json();
                              const issues = await issuesResponse.json();
                              const pullRequests = await pullRequestsResponse.json();

                              numCommits += commits.length;
                              numIssues += issues.length;
                              numPullRequests += pullRequests.length;
                            }

                            const reportData = {
                              name: githubUsername,
                              avatar_url: result.avatar_url,
                              totalRepos: numRepos,
                              totalFollowers: result.followers,
                              totalFollowing: result.following,
                              totalPullRequests: numPullRequests,
                              totalIssues: numIssues,
                              totalForks: numForks,
                              totalCommits: numCommits,
                              bio: result.bio || 'N/A',
                              location: result.location || 'N/A',
                              dateJoined: new Date(result.created_at).toLocaleDateString() || 'N/A',
                              yearsActive: calculateYearsActive(result.created_at),
                            };

                            const dHTML = createHTML(reportData);
                            const reportContainer = document.createElement('div');
                            reportContainer.innerHTML = dHTML;

                            const userAvatar = reportContainer.querySelector('#userAvatar');
                            userAvatar.onload = function () {
                              generatePDF(reportContainer);
                            };
                          } catch (error) {
                            console.error(error);
                          }
                        }
                        
                        generateCommitsGraph(${JSON.stringify(result)});