extends layout

 

block content

 

  include header

  style.

      .repo-card {

        border: 1px solid #ccc;

        padding: 10px;

        margin: 10px;

      }

  h1= Repositories

  div.container

    h4 List of Repositories

    div.container

    form.form-inline.mt-4(role='form', action="/repoDetails", method="post")

      div.input-group(style='width: 100%')

        input.form-control(type='search' placeholder='Search for repository' aria-label='Search')

        div.input-group-append(style='width: 10%')

          button.btn.btn-primary(type='submit', style='width: 100%')

            i.fa.fa-search

            i.bi.bi-search

    br.

    label(for="filterInput") Filter by forked repos:

    input(type="checkbox", id="filterInput")

    div#repositoryList

    script.

      const username = "#{owner}"; // Replace with your GitHub username

      const repoList = document.getElementById('repositoryList');

      const filterInput = document.getElementById('filterInput');

 

      // Function to fetch repositories from GitHub API

      async function fetchRepositories() {

        try {

          const response = await fetch(`https://api.github.com/users/${username}/repos`);

          const data = await response.json();

          return data;

        } catch (error) {

          console.error('Error fetching repositories:', error);

          return [];

        }

      }

 

      // Function to render repositories based on fork filter

      async function renderRepositories() {

        const showForks = filterInput.checked;

        const repositories = await fetchRepositories();

 

        // Clear existing list

        repoList.innerHTML = '';

 

        repositories.forEach((repo) => {

          // Check if we should show the repository based on fork filter

          if (!showForks || repo.fork) {

            // Create the HTML structure for each repository

            const repoCol = document.createElement('div');

            repoCol.classList.add('col');

            const repoCard = document.createElement('div');

            repoCard.classList.add('card');

            const cardBody = document.createElement('div');

            cardBody.classList.add('card-body');

            const repoLink = document.createElement('a');

            repoLink.classList.add('link-opacity-50-hover');

            repoLink.href = `/repoDetails?id=${repo.owner.login}&repo=${repo.name}`;

            repoLink.textContent = repo.full_name;

           

            const textLeftCol = document.createElement('div');

            textLeftCol.classList.add('col', 'text-left');

           

            if (repo.fork) {

              const forkBadge = document.createElement('span');

              forkBadge.classList.add('badge', 'badge-primary');

              forkBadge.textContent = 'Forked';

              textLeftCol.appendChild(forkBadge);

            }

           

            const cardText = document.createElement('p');

            cardText.classList.add('card-text');

            cardText.textContent = repo.description;

           

            // Append elements to the card

            cardBody.appendChild(repoLink);

            cardBody.appendChild(textLeftCol);

            cardBody.appendChild(cardText);

            repoCard.appendChild(cardBody);

            repoCol.appendChild(repoCard);

           

            // Append the card to the repository list

            repoList.appendChild(repoCol);

          }

        });

      }

 

      // Initial render

      renderRepositories();

 

      // Listen to checkbox changes

      filterInput.addEventListener('change', renderRepositories);

            //- button.btn.btn-outline-info.btn-sm(type='button') Info

 

  p.footer Copyright Â© 2023 My GitHub Analyser