extends layout

block content
  include header

  style.
    .repo-card {
      border: 1px solid #ccc;
      padding: 10px;
      margin: 10px;
    }

  h1= Repositories

  div.container
    h4 List of Repositories

    div.container
      form.form-inline.mt-4(role='form', action="/repoDetails", method="post")
        div.input-group(style='width: 100%')
          input#searchInput.form-control(type='search', placeholder='Search for repository' aria-label='Search')
          div.input-group-append(style='width: 10%')
            button.btn.btn-primary(type='button', style='width: 100%')
              i.fa.fa-search
              i.bi.bi-search

    br.

    label(for="filterInput") Filter by forked repos:
    input(type="checkbox", id="filterInput")

    div#repositoryList

  script.
    const username = "#{owner}"; // Replace with your GitHub username
    const repoList = document.getElementById('repositoryList');
    const filterInput = document.getElementById('filterInput');
    const searchInput = document.getElementById('searchInput');

    // Variable to store the original repositories
    let originalRepositories = [];
    let searchQuery = '';

    // Function to fetch repositories from GitHub API
    async function fetchRepositories() {
      try {
        const response = await fetch(`https://api.github.com/users/${username}/repos`);
        const data = await response.json();
        return data;
      } catch (error) {
        console.error('Error fetching repositories:', error);
        return [];
      }
    }

    // Function to handle the search and filter when Enter is pressed or the filter changes
    function handleKeyPress(event) {
      if (event.key === 'Enter' || event.type === 'change') {
        event.preventDefault(); // Prevent the form from being submitted
        searchQuery = searchInput.value.trim().toLowerCase(); // Get the search query and remove leading/trailing spaces
        const showForks = filterInput.checked;

        fetchRepositories().then(data => {
          const filteredData = data.filter(repo => (!searchQuery || repo.name.toLowerCase().includes(searchQuery)) && (!showForks || repo.fork));
          renderRepositories(filteredData); // Render the filtered repositories
        });
      } else if (event.key === 'Backspace') {
        // If the Backspace key is pressed, remove one character at a time from the search input
        searchQuery = searchQuery.slice(0, -1);
        fetchRepositories().then(data => {
          const filteredData = data.filter(repo => (!searchQuery || repo.name.toLowerCase().includes(searchQuery)));
          renderRepositories(filteredData); // Render the filtered repositories
        });
      }
    }

    // Add an event listener for the "keydown" event on the search input field
    searchInput.addEventListener('keydown', handleKeyPress);

    // Add an event listener for the "change" event on the filter checkbox
    filterInput.addEventListener('change', handleKeyPress);

    // Function to render repositories
    function renderRepositories(data) {
      // Clear existing list
      repoList.innerHTML = '';

      data.forEach((repo) => {
        // Check if we should show the repository based on the search query
        if (!searchQuery || repo.name.toLowerCase().includes(searchQuery)) {
          // Create the HTML structure for each repository
          const repoCol = document.createElement('div');
          repoCol.classList.add('col');

          const repoCard = document.createElement('div');
          repoCard.classList.add('card');

          const cardBody = document.createElement('div');
          cardBody.classList.add('card-body');

          const repoLink = document.createElement('a');
          repoLink.classList.add('link-opacity-50-hover');
          repoLink.href = `/repoDetails?id=${repo.owner.login}&repo=${repo.name}`;
          repoLink.textContent = repo.full_name;

          const textLeftCol = document.createElement('div');
          textLeftCol.classList.add('col', 'text-left');

          if (repo.fork) {
            const forkBadge = document.createElement('span');
            forkBadge.classList.add('badge', 'badge-primary');
            forkBadge.textContent = 'Forked';
            textLeftCol.appendChild(forkBadge);
          }

          const cardText = document.createElement('p');
          cardText.classList.add('card-text');
          cardText.textContent = repo.description;

          // Append elements to the card
          cardBody.appendChild(repoLink);
          cardBody.appendChild(textLeftCol);
          cardBody.appendChild(cardText);
          repoCard.appendChild(cardBody);
          repoCol.appendChild(repoCard);

          // Append the card to the repository list
          repoList.appendChild(repoCol);
        }
      });
    }

    // Initial fetch and render
    fetchRepositories().then(data => {
      originalRepositories = data; // Store the original repositories
      renderRepositories(originalRepositories); // Render the original repositories
    });
